#!/usr/bin/env node
'use strict';

const _ = require('lodash');
const blessed = require('blessed');
const contrib = require('blessed-contrib');
const colors = require('colors');
const Rx = require('rx');

const createLogRenderer = require('../lib/renderers/log');
const createLineRenderer = require('../lib/renderers/line');
const createWordCountRenderer = require('../lib/renderers/word-count');

const COMMON_WORDS = {
  'the': true,
  'a': true,
  'is': true,
  'to': true,
  'of': true,
  'for': true,
  'and': true,
  'in': 'true',
  'you': 'true',
  'be': 'true',
  'on': 'true',
  'i': true,
  'he': true,
  'are': true,
  'rt': true, //at least on twitter
  '&amp;': true
};

module.exports = function (uiState$) {
  const screen = blessed.screen();
  const grid = new contrib.grid({rows: 16, cols: 16, screen: screen });

  const line = grid.set(0, 0, 7, 16, contrib.line, {
    style: {
      line: 'yellow',
      text: 'green',
      baseline: 'black'
    },
    xLabelPadding: 3,
    xPadding: 5,
    label: 'Average score'
  });

  const log = grid.set(7, 0, 9, 10, contrib.log, {
    fg: 'green',
    selectedFg: 'green',
    label: 'Tweets'
  });

  const wordCountTable = grid.set(7, 13, 9, 3, contrib.table, {
    keys: true,
    fg: 'white',
    selectedFg: 'white',
    selectedBg: 'blue',
    interactive: true,
    label: 'Word Counts',
    width: '100%',
    height: '100%',
    border: {type: 'line', fg: 'cyan'},
    columnSpacing: 10, //in chars
    columnWidth: [24, 6] /*in chars*/
  });

  wordCountTable.focus();

  const ratingBarChart = grid.set(7, 10, 9, 3, contrib.bar, {
    label: 'Mood',
    barWidth: 11,
    barSpacing: 8,
    xOffset: 0,
    maxHeight: 100,
    style: { fg: 'blue' }
  });

  const renderLog = createLogRenderer(log);
  const renderLine = createLineRenderer(line);
  const renderWordCount = createWordCountRenderer(wordCountTable);

  screen.key(['escape', 'q', 'C-c'], function () {
    return process.exit(0);
  });
  screen.render();

  uiState$.subscribe(renderLog);

  const score$ = uiState$.pluck('sentiment').pluck('score').publish().refCount();

  const percentages$ = score$.bufferWithCount(100, 1).map((scores) => {
    const counts = [0, 0, 0];

    _.each(scores, (score) => {
      if (score < 0) {
        counts[0] = counts[0] + 1;
      } else if (score === 0) {
        counts[1] = counts[1] + 1;
      } else {
        counts[2] = counts[2] + 1;
      }
    });

    return counts;
  });

  percentages$.throttle(100).subscribe((percentages) => {
    ratingBarChart.setData({
      titles: ['Negative', 'Neutral', 'Positive'],
      data: percentages
    });
  });

  const rollingAverage$ = score$.bufferWithCount(50, 1).map((sentiments) => {
    return (sentiments.reduce((sum, rating) => {
      return sum + rating;
    }, 0) / sentiments.length);
  }).bufferWithCount(50, 1).throttle(200);

  rollingAverage$.subscribe(renderLine);

  const text$ = uiState$.pluck('tweet').pluck('text').publish().refCount();

  const words$ = text$.flatMapLatest((tweet) => {
    return Rx.Observable.fromArray(tweet.split(' '));
  }).map((word) => {
    return word.toLowerCase().replace(/[\W\s]/g, '');
  }).filter((word) => {
    return !COMMON_WORDS[word] && word.length > 0;
  });

  const wordCounts$ = words$.scan((allWords, word) => {
    if (allWords[word]) {
      allWords[word] = allWords[word] + 1;
    } else {
      allWords[word] = 1;
    }
    return allWords;
  }, {});

  const mostPopular$ = wordCounts$.map(function (wordCounts) {
    const pairs = _.toPairs(wordCounts);
    const sorted = _.sortBy(pairs, (x) => {
      return -x[1];
    });

    return _.take(sorted, 20);
  });

  mostPopular$.throttle(1000).subscribe(renderWordCount);
};
